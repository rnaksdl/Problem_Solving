#lang racket

(define-namespace-anchor a)
(define ns (namespace-anchor->namespace a))


(define x 3)
(set! x 4)
x

(map + '(1 2 3) '(4 5 6))

(map car '((1 2 3) (okc ca osu)))

(let ((x 3) (y 7)) (* x y))

(let ((x 4)) (let ((x 5) (y x)) (+ x y)))

(let ((x 4)) (let ((x 5) (y x)) (+ x y)) x)

(let ((x 1)) 1 2 3 'okc)


(eval (car '((+ 3 4) okc norman)) ns)

((lambda (x) (+ x 1)) (+ 3 4))


(define naturals (letrec ((next (lambda (n) (cons n (delay (+ n 1))))))(next 1)))


naturals

(force (cdr naturals))
















(define (rev l)
  (if (null? l) '()
      (append (rev (cdr l)) (list (car l)))))

(define (trrev l)
  (letrec ((helper (lambda (l1 l2)
                     (if (null? l1) l2
                         (helper (cdr l1) (cons (car l1) l2))))))(helper l '())))




(define (fac n)
  (if (= n 0) 1
      (* n (fac (- n 1)))))

fac
(fac 4)

(define (TRfac n)
  (letrec ((helper (lambda (re m)
                     (if (= m n) re
                         (helper (* re (+ m 1)) (+ m 1)))))) (helper 1 0)))

(TRfac 4)

(define (trfac n)
  (letrec ((helper (lambda (re m)
                     (if (= m n) re
                         (helper (* re (+ m 1)) (+ m 1)))))) (helper 1 0)))






(define (sum-n n)
  (if (= n 0) 0
      (+ n (sum-n (- n 1)))))

(sum-n 50)

(define (tr-sum-n n)
  (letrec ((helper (lambda (re m)
                     (if (= m 0) re
                         (helper (+ re m) (- m 1))))))
    (helper 0 n)))

(tr-sum-n 50)






(define (fib n)
  (if (<= n 1) n
      (+ (fib (- n 1)) (fib (- n 2)))))

(fib 10)


(define (tr-fib n)
  (letrec ((helper (lambda (a b m)
                     (if (= m 0) a
                         (helper b (+ a b) (- m 1))))))
    (helper 0 1 n)))

(tr-fib 100)







(define (TR_++ l)
  (letrec ((helper (lambda (l result)
                     (if (null? l) result
                         (helper (cdr l) (append result (list (+ (car l) 1))))))))(helper l '())))



(TR_++ '(0 1 2 3 4 5))








(define (trf _)
  (letrec ((helper (lambda (__ result)
                     (if (__) __
                         (helper (__) (__))
                         )
                     )
                   ))
    (helper _ _)
    )
  )






(define (scalarmul alist n)
  (letrec ((helper (lambda (alist result)
                     (if (null? alist) result
                         (helper (cdr alist) (append result (list (* (car alist) n))))))))(helper alist '())))

(scalarmul '(1 2 0) 3)
(scalarmul '(3 4 5) 10)



(define lazycube
  (letrec ((next (lambda (n)
                   (cons (* (* n n) n) (delay (next (+ n 1)))))))(next 1)))


(force (car lazycube))
(cdr (force (cdr lazycube)))


(force (cdr lazycube))
(force (cdr lazycube))